schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  id: LongOperationFilterInput
  name: StringOperationFilterInput
  price: DecimalOperationFilterInput
  storedProducts: ListFilterInputTypeOfStoredProductFilterInput
}

input ProductSortInput {
  id: SortEnumType
  name: SortEnumType
  price: SortEnumType
}

type Product {
  storedProducts: [StoredProduct!]
  id: Long!
  name: String!
  price: Decimal!
}

type OrderResult {
  id: Long!
  customerId: UUID!
  totalAmount: Decimal!
  orderResultItems: [OrderResultItem!]!
}

input ReceivedOrderInput {
  orderItems: [ReceivedOrderItemsInput!]!
  customerId: UUID!
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ListFilterInputTypeOfStoredProductFilterInput {
  all: StoredProductFilterInput
  none: StoredProductFilterInput
  some: StoredProductFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

type StoredProduct {
  productId: Long!
  product: Product!
  warehouseId: Long!
  warehouse: Warehouse!
  productUUID: String!
}

input ReceivedOrderItemsInput {
  productId: Long!
  amount: Int!
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The built-in `Decimal` scalar type."
scalar Decimal

input StoredProductFilterInput {
  and: [StoredProductFilterInput!]
  or: [StoredProductFilterInput!]
  productId: LongOperationFilterInput
  product: ProductFilterInput
  warehouseId: LongOperationFilterInput
  warehouse: WarehouseFilterInput
  productUUID: StringOperationFilterInput
}

input WarehouseFilterInput {
  and: [WarehouseFilterInput!]
  or: [WarehouseFilterInput!]
  id: LongOperationFilterInput
  zip: LongOperationFilterInput
  storedProducts: ListFilterInputTypeOfStoredProductFilterInput
}

type Query {
  products(where: ProductFilterInput order: [ProductSortInput!]): [Product!]
}

type Mutation {
  placeOrder(order: ReceivedOrderInput!): OrderResult!
}

type Subscription {
  orderPlaced: OrderResult
}

scalar UUID

type OrderResultItem {
  id: Long!
  productId: Long!
  product: Product!
  productUUID: String!
  warehouseId: Long!
  warehouse: Warehouse!
  orderResultId: Long!
  orderResult: OrderResult!
}

type Warehouse {
  id: Long!
  zip: Long!
  storedProducts: [StoredProduct!]!
}